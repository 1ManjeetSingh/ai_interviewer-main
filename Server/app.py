# -*- coding: utf-8 -*-
"""job_desc_backend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oAciahnhpx51fpbbIouVuKa7inLR7Cko
"""

from flask import Flask, request, jsonify
import google.generativeai as genai
import json
from flask_cors import CORS
from dotenv import load_dotenv
import os


app = Flask(__name__)
CORS(app)  # Enable CORS for all routes
load_dotenv()

google_api_key = os.getenv("GOOGLE_API_KEY")


# Configure the Google Generative AI model
genai.configure(api_key=google_api_key)

def generate_job_description(job_title, position):
    """
    Generate a structured job description using Google Generative AI.

    Parameters:
    - job_title (str): The title of the job.
    - position (str): The position type (e.g., internship, freelance, fresher, etc.).

    Returns:
    - str: Generated job description.
    """
    prompt = f"""
    You have over 15 years of experience as a recruiter, placing top talent across diverse industries. Rely on this expertise to craft a *thorough and high-caliber job description* for the role of *"{job_title}"* at the *"{position}"* level.

Follow this structure to ensure clarity and professionalism:

1. Job Title and Level
   - Clearly state the position title (e.g., “Senior Software Engineer”) and the employment type (full-time, part-time, or contract).

2. Job Overview/Summary
   - In 2–3 concise paragraphs, describe the essence of the role and its primary objectives.
   - Highlight how this position fits within the team’s mission and outline its broader impact on organizational goals.

3. Key Responsibilities
   - Present a bulleted list of main duties and responsibilities.
   - Emphasize tasks that can be measured or quantified wherever possible.

4. Required Qualifications
   - Align mandatory skills directly with the "{job_title}" and "{position}".
   - Specify educational requirements, technical proficiencies (e.g., programming languages), and any relevant certifications.
   - For entry-level or internship roles, focus on foundational skills and a willingness to learn.
   - For experienced or senior positions, stress leadership qualities, advanced competencies, and deep subject-matter expertise.

5. Preferred Qualifications
   - Highlight additional, valuable skills or background that would set candidates apart.
   - Include advanced degrees, specialized experience, or complementary skill sets.

6. Company Culture and Values
   - Outline the organization’s culture, emphasizing inclusivity, collaboration, and commitment to diversity.
   - Convey why candidates would find the work environment engaging and fulfilling.

Throughout your description, maintain a professional, informative, and engaging tone, reflecting the knowledge and authority of a seasoned recruiter with 15+ years of industry experience.
"""
    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content(prompt)
    return response.text

def extract_skills(content, context, skill_type, dependencies=None):
    """
    Extract main or subskills based on the provided content and context.
    """
    if skill_type == "main skills":
        prompt = f"""
        Acting as an expert technical recruiter and industry analyst with deep expertise in skills assessment and job market trends, analyze the following job description:

        "{content}"

        Context: {context}

        Extract and list 7-10 ESSENTIAL core competencies that represent the fundamental skills required for success in this role. Your selection should:

        CRITICAL REQUIREMENTS:
        1. Cover the full spectrum of required expertise:
           - Technical prowess and domain knowledge
           - Professional/soft skills crucial for the role
           - Leadership and management capabilities (if applicable)
           - Industry-specific competencies

        2. Focus on timeless, foundational skills that:
           - Drive performance and success in the role
           - Align with current industry standards
           - Demonstrate mastery in the field
           - Enable career progression

        3. Ensure each skill is:
           - Precisely defined (1-3 words maximum)
           - Immediately recognizable in the industry
           - Measurable and assessable
           - Relevant to the seniority level

        FORMAT REQUIREMENTS:
        - Return ONLY a comma-separated list
        - No explanations or additional text
        - No bullet points or numbering
        - Example format: Data Engineering, Cloud Architecture, Team Leadership

        Your response should represent the absolute core competencies that would appear on a highly targeted job posting for this specific position.
        """
    else:  # subskills
        prompt = f"""
        As a technical skills mapping specialist with expertise in competency frameworks, analyze this job description and its associated main skills:

        "{content}"

        Context: {context}

        Generate 12-15 highly specific and cutting-edge subskills that demonstrate practical application of the main skills. Your selection must:

        CRITICAL REQUIREMENTS:
        1. Target practical implementation:
           - Specific tools and technologies currently in demand
           - Industry-standard methodologies and frameworks
           - Concrete technical implementations
           - Measurable capabilities

        2. Ensure direct alignment:
           - Each subskill must clearly support one or more main skills
           - Focus on current market-relevant tools and practices
           - Include emerging technologies where appropriate
           - Reflect real-world application

        3. Maintain specificity:
           - Use industry-standard tool/technology names
           - Include version/specialty where relevant
           - Focus on practical, hands-on capabilities
           - Prioritize measurable technical competencies

        FORMAT REQUIREMENTS:
        - Return ONLY a comma-separated list
        - Maximum 3 words per subskill
        - No explanations or additional text
        - Example format: AWS Lambda, Kubernetes, PyTorch, Agile Scrum

        Your response should read like a technical requirements list that would appear in a sophisticated job description, focusing on practical implementation tools and methodologies.
        """

    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content(prompt)
    skills = [skill.strip() for skill in response.text.strip().split(',')]
    return list(dict.fromkeys(skills))

def remove_duplicates(subskills, main_skills):
    """
    Ensure subskills do not fully repeat main skills.

    Parameters:
    - subskills (list): List of subskills generated.
    - main_skills (list): List of main skills.

    Returns:
    - list: Filtered subskills.
    """
    main_skills_lower = {skill.lower() for skill in main_skills}
    return [
        subskill for subskill in subskills
        if subskill.lower().split(' (')[0] not in main_skills_lower  # Exclude exact matches, ignoring examples
    ]

def display_json_output(job_description, main_skills, subskills):
    """
    Return the structured output in JSON format.

    Parameters:
    - job_description (str): The generated job description.
    - main_skills (list): List of main skills.
    - subskills (list): List of subskills.

    Returns:
    - dict: Structured output.
    """
    output = {
        "job_description": job_description,
        "main_skills": main_skills,
        "sub_skills": subskills
    }
    return output
@app.route('/generate_job_description', methods=['POST'])
def generate_job_description_api():
    """
    API endpoint to generate job description and related skills.
    """
    data = request.json
    job_title = data.get('job_title')
    position = data.get('position')

    if not job_title or not position:
        return jsonify({"error": "Both job_title and position are required"}), 400

    try:
        # Generate job description
        job_description = generate_job_description(job_title, position)

        # Print the job description to the console
        print("Generated Job Description:\n", job_description)

        # Generate main skills
        main_skills = extract_skills(job_description, f"{job_title} - {position}", "main skills")

        # Generate subskills
        subskills = extract_skills(
            f"{job_description}\nMain Skills: {', '.join(main_skills)}",
            f"{job_title} - {position}",
            "subskills",
            dependencies=main_skills
        )

        # Filter subskills to remove overlap with main skills
        filtered_subskills = remove_duplicates(subskills, main_skills)

        # Return structured output as JSON
        structured_output = display_json_output(job_description, main_skills, filtered_subskills)
        return jsonify(structured_output)

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)